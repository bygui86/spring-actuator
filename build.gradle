// *** SpringActuator - Sample ***

// SCRIPT
buildscript {
	ext {
		springBootVersion = '2.0.1.RELEASE'
		micrometerPrometheusVersion = '1.0.4'
		h2Version = '1.4.197'
		slf4jVersion = '1.7.25'
		lombokVersion = '1.16.20'
		dockerPluginVersion = '1.2'
		aptPluginVersion = '0.4'
		gitPluginVersion = '1.4.21'
	}

	repositories {
		mavenCentral()
		maven { url 'https://plugins.gradle.org/m2/' }
	}

	dependencies {
		classpath group: 'org.springframework.boot', name: 'spring-boot-gradle-plugin', version: "${springBootVersion}"
		classpath group: 'se.transmode.gradle', name: 'gradle-docker', version: "${dockerPluginVersion}"
		classpath group: 'net.ltgt.gradle', name: 'gradle-apt-plugin', version: "${aptPluginVersion}"
		classpath group: 'gradle.plugin.com.gorylenko.gradle-git-properties', name: 'gradle-git-properties', version: "${gitPluginVersion}"
	}
}

// PLUGINS
apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'net.ltgt.apt'
apply plugin: 'com.gorylenko.gradle-git-properties'
apply plugin: 'docker'
apply plugin: 'maven'

// COMPILING
group 'com.rabbitshop'
version '0.1-snapshot'

jar {
	baseName = 'springactuatorsample'
	version = "${version}"
}

// See https://docs.gradle.org/current/dsl/org.gradle.api.tasks.compile.JavaCompile.html
compileJava {

	// The Java language level to use to compile the source files.
	sourceCompatibility = 1.8

	// The target JVM to generate the .class files for.
	targetCompatibility = 1.8

	// PLEASE NOTE: with the new version of Gradle, Lombok needs Java9+ to compile properly with fork enabled
	// Enable compilation in a separate daemon process
	// options.fork = true

	// Enable incremental compilation
	options.incremental = true

	// Reveal specific warnings during compilation
	options.compilerArgs << '-Xlint:unchecked' << '-Xlint:deprecation'
}

// GRADLE PROPERTY EXPANSION (Spring properties not included)
processResources {
	doFirst {
		filesMatching('application.properties') {
			println 'Processing application.properties file to replace key with values...'
			expand project.properties
		}
	}
}

// REPOS
repositories {
	mavenCentral()
}

// DEPENDENCIES
dependencies {

	// Spring Boot DevTools
	runtime group: 'org.springframework.boot', name: 'spring-boot-devtools', version: "${springBootVersion}"

	// Spring Actuator
	compile group: 'org.springframework.boot', name: 'spring-boot-starter-actuator', version: "${springBootVersion}"

	// Spring Web
	compile group: 'org.springframework.boot', name: 'spring-boot-starter-web', version: "${springBootVersion}"

	// Spring Security
	compile group: 'org.springframework.boot', name: 'spring-boot-starter-security', version: "${springBootVersion}"

	// Spring Data JPA
	compile group: 'org.springframework.boot', name: 'spring-boot-starter-data-jpa', version: "${springBootVersion}"

	// Spring Mail
	compile group: 'org.springframework.boot', name: 'spring-boot-starter-mail', version: "${springBootVersion}"

	// H2
	compile group: 'com.h2database', name: 'h2', version: "${h2Version}"

	// Micrometer - Prometheus
	compile group: 'io.micrometer', name: 'micrometer-registry-prometheus', version: "${micrometerPrometheusVersion}"

	// Slf4j
	compile group: 'org.slf4j', name: 'slf4j-api', version: "${slf4jVersion}"

	// Lombok
	compileOnly group: 'org.projectlombok', name: 'lombok', version: "${lombokVersion}"
	annotationProcessor group: 'org.projectlombok', name: 'lombok', version: "${lombokVersion}"
}

// SPRING BOOT
// CONFIGS
springBoot {
	buildInfo()
}
// PLUGIN
bootRun {
	jvmArgs = ["-Xdebug -Xnoagent -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=5005"]
//	jvmArgs = ["-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5005"]
}

// DOCKER
docker {
	baseImage 'openjdk:8-jre-alpine'
	maintainer 'Rabbit team'
}

// TASKS
task wrapper(type: Wrapper) {
	gradleVersion = '4.7'
}

task buildDockerfile(type: Docker, dependsOn: build) {
	doFirst {
		applicationName = jar.baseName

		addFile('build/libs/', '/opt/')
		workingDir('/opt')
		exposePort(9190)
		entryPoint(["exec java \$JAVA_OPTS -jar ${jar.baseName}-${project.version}.jar"])

		// push = project.hasProperty('push')
		push = false
		// Default image tag ${project.group}/${jar.baseName}:${project.version}
		// tag = '...'
		// Flag to decide if generate the Docker image (false as default) or not (true)
		dryRun = true
	}
	doLast {
		copy {
			from 'build/docker/Dockerfile'
			into './'
		}
		println "Dockerfile template properly generated, please review it!"
		println "Focus on following commands:"
		println "\t. ADD"
		println "\t. ENTRYPOINT"
	}
}
